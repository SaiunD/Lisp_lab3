(defun shake-it (lst R i k)
  (if (and lst (cdr lst))
      (if (< i R)
          (let* ((z1 (car lst))
                 (z2 (car (cdr lst)))
                 (cond1 (> z1 z2))
                 (z (if cond1 z2 z1))
                 (new-lst (if cond1 (cons z1 (cdr (cdr lst))) (cdr lst)))
                 (new-k (if cond1 i k)))
            (multiple-value-bind (temp-lst bind-k bind-R) (shake-it new-lst R (1+ i) new-k)
              (if (> i bind-R)
                  (values (cons z temp-lst) bind-k bind-R)
                  (let* ((cond2 (and temp-lst (<= z (car temp-lst))))
                         (back-k (if cond2 bind-k i)))
                    (if cond2
                        (values (cons z temp-lst) back-k bind-R)
                        (values (cons (car temp-lst) (cons z (cdr temp-lst))) back-k bind-R))))))
          (values lst k k))
      (values lst k k)))

(defun left-side-apart (lst L &optional (i 0))
  (if (< i L)
      (multiple-value-bind (left rest) (left-side-apart (cdr lst) L (1+ i))
        (values (cons (car lst) left) rest))
      (values nil lst)))

(defun shaker-sort-inner (lst L R k)
  (if (< L R)
      (multiple-value-bind (left-side right-side) (left-side-apart lst L)
        (multiple-value-bind (res res-k res-R) (shake-it right-side R L k)
          (shaker-sort-inner (append left-side res) (1+ res-k) res-R res-k)))
      lst))

(defun shaker-sort (lst)
  (shaker-sort-inner lst 0 (1- (length lst)) 0))

(defun check-shaker-sort (name input-lst expected) 
  "Execute `shaker-sort' on `input', compare result with `expected' and print comparison status" 
  (format t "~:[FAILED~;passed~]... ~a~%" 
          (equal (shaker-sort input-lst) expected) 
          name))

(defun test-shaker-sort ()
  (check-shaker-sort "test-1" '(3 5 2 6 1 8 4 7) '(1 2 3 4 5 6 7 8))
  (check-shaker-sort "test-2" '(6 5 4 3 2 1) '(1 2 3 4 5 6))
  (check-shaker-sort "test-3" '(1 2 3 4 5 6) '(1 2 3 4 5 6))
  (check-shaker-sort "test-4" '() '()))
